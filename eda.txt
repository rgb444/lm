# 1. Import Libraries

# pandas for data manipulation and analysis.
import pandas as pd

# NumPy for numerical operations
import numpy as np

# Matplotlib for creating plots.
import matplotlib.pyplot as plt

# Seaborn for advanced visualizations.
import seaborn as sns

# LabelEncoder: Encodes categorical labels (e.g., 'Male', 'Female') into numeric values.
# StandardScaler: Scales numerical data to have a mean of 0 and standard deviation of 1.
from sklearn.preprocessing import LabelEncoder, StandardScaler

# Set the style of the plots to "whitegrid" for better aesthetics
%matplotlib inline
sns.set(style="whitegrid")

# 2. Load the Dataset
# Load the dataset from the given path and display the first 5 rows for inspection
df = pd.read_csv('tested.csv')
df.head() 

# 3. Overview of Data

# Display the shape of the dataframe (number of rows and columns)
print("Shape : ", df.shape)

# List all column names
print("\nColumns:\n\n", df.columns)

# Display a concise summary of the dataset, including data types, non-null counts, and memory usage
print("\nInfo:\n" )
df.info()

# Show summary statistics for all columns, including both numeric and categorical data
print("\nSummary Statistics:\n")
df.describe(include='all')

# 4. Checking Missing Data

# Count the missing values for each column. 
# It returns the count of missing values per column.
missing = df.isnull().sum() 

# Display only columns with missing values and their respective counts.
print("\nMissing Values:\n", missing[missing > 0])

# Visualizing missing data in the dataset using a heatmap.
# Yellow indicates missing values, and purple indicates non-missing values.
plt.figure(figsize=(10,6))
sns.heatmap(df.isnull(), cbar=False, cmap='viridis')
plt.title("Missing Data Heatmap")
plt.show()

# 5. Handling Missing Data

# Handle missing values:
# - For categorical columns (dtype == 'object'), fill missing values with the mode (most frequent value).
# - For numerical columns, fill missing values with the median.
for column in df.columns:
    if df[column].dtype == 'object':
        df[column].fillna(df[column].mode()[0], inplace=True)  # Filling categorical missing values with mode
    else:
        df[column].fillna(df[column].median(), inplace=True)  # Filling numerical missing values with median

# Verify if there are any missing values left
print(df.isnull().sum())

# 6. Visualization

# Countplot for a categorical column (e.g., 'Sex' to show distribution of gender)
# Replace 'Sex' with the actual column name from your dataset
plt.figure(figsize=(6,4))
sns.countplot(data=df, x='Sex')  # Edit based on actual categorical column
plt.title("Count of Categories: Sex")

# Distribution plot (histogram + KDE) for a numerical column (e.g., 'Age')
# Replace 'Age' with an actual numerical column from your dataset
plt.figure(figsize=(6,4))
sns.histplot(df['Age'], kde=True)  # Replace 'Age' with numeric column
plt.title("Distribution of Age")

# Boxplot showing the distribution of a numerical feature by category (e.g., 'Age' by 'Sex')
# Replace as needed with your actual columns
plt.figure(figsize=(6,4))
sns.boxplot(data=df, x='Sex', y='Age')  # Edit as per your data
plt.title("Boxplot: Age by Sex")

# 7. Correlation & Heatmap

# Calculate the correlation matrix for numerical columns only
corr_matrix = df.corr(numeric_only=True) 

# Plot the correlation matrix using a heatmap.
# Annotating each cell with the numeric value and applying the 'coolwarm' color palette.
plt.figure(figsize=(10,6))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', linewidths=0.5) 
plt.title("Correlation Heatmap")
plt.show()

# Scatter Plot with Hue based on a categorical column (e.g., Survival or Gender)
# Replace 'Survived' with an actual categorical column from your dataset
plt.figure(figsize=(8,6))
sns.scatterplot(data=df, x='Age', y='Fare', hue='Survived')  # Replace with your actual columns
plt.title('Scatter Plot: Age vs Fare (Colored by Survived)')
plt.show()

# 8. Encoding Categorical Variables

# Label Encoding for binary categorical columns (e.g., 'Male', 'Female')
# "male" → 1, "female" → 0
label_enc = LabelEncoder()
for column in df.select_dtypes(include='object').columns:
    if df[column].nunique() == 2:
        df[column] = label_enc.fit_transform(df[column])

# One-Hot Encoding for other categorical columns with more than two categories
# drop_first=True avoids multicollinearity by dropping the first category in the encoded columns
df = pd.get_dummies(df, drop_first=True)

# Display the first few rows to verify encoding
df.head()

# 9. Feature Scaling

# Scaling numerical columns using StandardScaler (mean=0, std=1)
scaler = StandardScaler()
num_cols = df.select_dtypes(include=np.number).columns
df[num_cols] = scaler.fit_transform(df[num_cols])

# Display the first few rows after scaling
df.head()

# 10. Final Dataset Summary

# Display the final shape of the dataframe after encoding and scaling
print("Final Shape:", df.shape)

# Display the final column names after encoding categorical variables
print("Final Columns:\n", df.columns)