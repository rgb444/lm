# === Import Required Libraries ===
import numpy as np                # For numerical operations
import pandas as pd               # For handling data (CSV file, DataFrame operations)
import matplotlib.pyplot as plt    # For creating visualizations/plots
import seaborn as sns             # For advanced plotting (heatmaps, pairplots, etc.)
from sklearn.model_selection import train_test_split  # For splitting data into train and test sets
from sklearn.naive_bayes import GaussianNB  # For Naive Bayes Classifier
from sklearn.preprocessing import StandardScaler, LabelEncoder  # For feature scaling and encoding labels
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score  # For model evaluation metrics
import warnings                   # To suppress unnecessary warnings
warnings.filterwarnings('ignore') # Ignores warnings during execution to keep the output clean

# === Load Dataset ===
df = pd.read_csv('iris.csv')  # Load the Iris dataset (replace with the correct path if necessary)

# === Exploratory Data Analysis (EDA) ===
print("First five rows:")
print(df.head())  # Displays the first 5 rows to get an overview of the data

print("\nShape of the dataset:", df.shape)  # Shows the number of rows and columns in the dataset

print("\nMissing values:")
print(df.isnull().sum())  # Checks for any missing values in the dataset

print("\nData Description:")
print(df.describe())  # Displays summary statistics for numerical columns (e.g., mean, std, min, max)

print("\nClass Distribution:")
print(df['species'].value_counts())  # Shows the count of each class (species) in the target variable

# === Visualizations ===

# Correlation Heatmap
plt.figure(figsize=(10, 8))  # Set the figure size for better readability
numeric_columns = df.select_dtypes(include=['float64', 'int64']).columns  # Select only numeric columns
correlation = df[numeric_columns].corr()  # Calculate the correlation matrix for numeric features
sns.heatmap(correlation, annot=True, cmap='coolwarm')  # Create a heatmap to visualize correlations
plt.title('Correlation Heatmap')  # Title of the heatmap
plt.show()  # Display the plot

# Pairplot for visual separation of species
sns.pairplot(df, hue='species')  # Creates pairwise plots for features with color separation by species
plt.suptitle('Pairplot of Iris Features', y=1.02)  # Title for the pairplot
plt.show()  # Display the plot

# === Preprocessing ===
# Split features (X) and target (y)
X = df.drop('species', axis=1)  # Feature matrix (drop the target column)
y = df['species']  # Target vector (species column)

# Encode target labels (species names) into numerical values (0, 1, 2)
le_target = LabelEncoder()  # Initialize label encoder
y_encoded = le_target.fit_transform(y)  # Apply encoding to the target variable

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y_encoded, test_size=0.3, random_state=42, stratify=y_encoded)  # Split data into 70% train and 30% test
print(f"\nData split into training ({X_train.shape[0]} samples) and testing ({X_test.shape[0]} samples) sets")

# Feature scaling
scaler = StandardScaler()  # Initialize standard scaler
X_train_scaled = scaler.fit_transform(X_train)  # Fit and transform the training data
X_test_scaled = scaler.transform(X_test)  # Transform the test data using the same scaler

# === Model Training ===
gnb = GaussianNB()  # Initialize Gaussian Naive Bayes classifier
gnb.fit(X_train_scaled, y_train)  # Train the model using the scaled training data

# === Predictions ===
y_pred = gnb.predict(X_test_scaled)  # Use the trained model to make predictions on the test set

# === Evaluation ===
accuracy = accuracy_score(y_test, y_pred)  # Calculate the accuracy of the model
print(f"\nAccuracy: {accuracy:.4f}\n")  # Print the accuracy to 4 decimal places

# Classification Report (Precision, Recall, F1-Score, etc.)
print("Classification Report:")
print(classification_report(y_test, y_pred, target_names=le_target.classes_))  # Detailed evaluation metrics

# Confusion Matrix (visual representation of correct vs incorrect classifications)
plt.figure(figsize=(8, 6))  # Set figure size for better readability
cm = confusion_matrix(y_test, y_pred)  # Calculate confusion matrix
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',  # Create a heatmap for confusion matrix
            xticklabels=le_target.classes_, yticklabels=le_target.classes_)
plt.title('Confusion Matrix')  # Title of the confusion matrix plot
plt.ylabel('True Label')  # Label for the y-axis (True Labels)
plt.xlabel('Predicted Label')  # Label for the x-axis (Predicted Labels)
plt.show()  # Display the confusion matrix plot
