# === 1. Import Required Libraries ===
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import warnings
warnings.filterwarnings('ignore')

# === 2. Load Dataset ===
df = pd.read_csv('heart.csv')

# === 3. Preview Dataset ===
print("First 5 rows of the dataset:")
print(df.head())

# === 4. Rename columns (if needed) ===
df.rename(columns={
    'creatinine_phosp': 'creatinine_phosphokinase',
    'serum_soc': 'serum_sodium'
}, inplace=True)

# === 5. Dataset Overview ===
print("\nShape of Dataset:", df.shape)
print("\nData Types:\n", df.dtypes)
print("\nMissing Values:\n", df.isnull().sum())
print("\nTarget Value Counts:\n", df['DEATH_EVENT'].value_counts())
print("\nStatistical Summary:\n", df.describe(include='all'))

# === 6. Visualize Missing Data ===
plt.figure(figsize=(10, 6))
sns.heatmap(df.isnull(), cbar=False, cmap='viridis')
plt.title("Missing Data Heatmap")
plt.show()

# === 7. Encode Categorical Variables ===
# Identify object-type columns (categorical)
cat_cols = df.select_dtypes(include='object').columns

# Apply Label Encoding for binary categorical columns
le = LabelEncoder()
for col in cat_cols:
    if df[col].nunique() == 2:
        df[col] = le.fit_transform(df[col])
    else:
        df = pd.get_dummies(df, columns=[col], drop_first=True)

# === 8. Correlation Heatmap ===
plt.figure(figsize=(12, 10))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap of Features')
plt.show()

# === 9. Visualizations ===
# Countplot of Target
plt.figure(figsize=(6, 4))
sns.countplot(data=df, x='DEATH_EVENT')
plt.title("Target Variable Distribution")
plt.show()

# Histogram of Age
plt.figure(figsize=(6, 4))
sns.histplot(df['age'], kde=True, color='green')
plt.title("Age Distribution")
plt.show()

# Boxplot for Creatinine Phosphokinase
plt.figure(figsize=(6, 4))
sns.boxplot(data=df, y='creatinine_phosphokinase', color='skyblue')
plt.title("Boxplot: Creatinine Phosphokinase")
plt.show()

# Pairplot for selected features
sns.pairplot(df[['age', 'ejection_fraction', 'serum_creatinine', 'serum_sodium', 'DEATH_EVENT']], hue='DEATH_EVENT')
plt.suptitle("Pairplot of Key Features", y=1.02)
plt.show()

# === 10. Feature Selection ===
X = df.drop('DEATH_EVENT', axis=1)
y = df['DEATH_EVENT']

# === 11. Split Dataset ===
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=42, stratify=y)

# === 12. Feature Scaling ===
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# === 13. Model Training (Gaussian Naive Bayes) ===
model = GaussianNB()
model.fit(X_train_scaled, y_train)

# === 14. Predictions ===
y_pred = model.predict(X_test_scaled)

# === 15. Evaluation ===
print(f"\nModel Accuracy: {accuracy_score(y_test, y_pred):.4f}")
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix
plt.figure(figsize=(8, 6))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues',
            xticklabels=['Alive', 'Dead'], yticklabels=['Alive', 'Dead'])
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()